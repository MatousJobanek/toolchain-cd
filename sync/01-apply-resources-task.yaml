---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: apply-resources-task
spec:
  inputs:
    resources:
    - name: source
      type: git
    params:
    - name: PATHTODEPLOYMENT
      type: string
      description: Path to the manifest to apply
      default: deploy
    - name: DRYRUN
      type: string
      description: If true run a server-side dryrun.
      default: "false"
  steps:
  - name: run-oc-apply
    image: quay.io/openshift/origin-cli:4.3
    workingDir: /workspace/source
    command: ["oc"]
    args:
    - "apply"
    - "--dry-run=$(inputs.params.DRYRUN)"
    - "-f"
    - "$(inputs.params.PATHTODEPLOYMENT)"
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: process-project-and-apply-task
spec:
  inputs:
    resources:
    - name: source
      type: git
    params:
    - name: PATHTODEPLOYMENT
      type: string
      description: Path to the manifest to apply
      default: deploy
    - name: DRYRUN
      type: string
      description: If true run a server-side dryrun.
      default: "false"
  steps:
  - name: run-oc-apply
    image: quay.io/openshift/origin-cli:4.3
    workingDir: /workspace/source
    script: |
      #!/bin/sh
      set -e
      for REPO in `cat toolchain-cd-projects`; do
        oc process -f $(inputs.params.PATHTODEPLOYMENT) -p TOOLCHAIN_REPO=${REPO} | oc apply --dry-run=$(inputs.params.DRYRUN) -f -
      done
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: process-all-projects-and-create-task
spec:
  inputs:
    resources:
    - name: source
      type: git
    params:
    - name: PATHTODEPLOYMENT
      type: string
      description: Path to the manifest to apply
      default: deploy
    - name: DRYRUN
      type: string
      description: If true run a server-side dryrun.
      default: "false"
  steps:
  - name: run-oc-apply
    image: quay.io/openshift/origin-cli:4.3
    workingDir: /workspace/source
    script: |
      #!/bin/sh
      set -ex
      ALL_PROJECTS=`cat toolchain-cd-projects | tr "\n" " "`
      oc process -f $(inputs.params.PATHTODEPLOYMENT) \
        -p TOOLCHAIN_CD_PROJECTS="${ALL_PROJECTS}" \
        -p EXTERNAL_SYNC_DOMAIN=`oc get route toolchain-cd-sync-eventlistener --template '{{.spec.host}}'` \
        -p EXTERNAL_TOOLCHAIN_CD_DOMAIN=`oc get route toolchain-cd-eventlistener --template '{{.spec.host}}'` \
        | oc create --dry-run=$(inputs.params.DRYRUN) -f -