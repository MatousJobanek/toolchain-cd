---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-buildah-short-sha-image
spec:
  inputs:
    resources:
    - name: toolchain-cd-repo
      type: git
      targetPath: toolchain-cd
    params:
    - name: tls-verify
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"

  outputs:
    resources:
    - name: buildah-short-sha-image
      type: image

  steps:
  - name: build-and-push-short-sha
    image: quay.io/buildah/stable:v1.11.0
    workingDir: '/workspace/toolchain-cd/'
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true
    script: |
      #!/bin/sh
      set -ex
      buildah bud --tls-verify=$(inputs.params.tls-verify) --layers -f /workspace/toolchain-cd/buildah-short-sha/Dockerfile -t $(outputs.resources.buildah-short-sha-image.url) .
      buildah push --tls-verify=$(inputs.params.tls-verify) $(outputs.resources.buildah-short-sha-image.url) docker://$(outputs.resources.buildah-short-sha-image.url)

  volumes:
  - name: varlibcontainers
    emptyDir: {}
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-docker-tools-image
spec:
  inputs:
    resources:
    - name: project-repo
      type: git
      targetPath: $(inputs.params.repo-path)
    params:
    - name: repo-path
      description: The path to the repository
    - name: tls-verify
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"

  outputs:
    resources:
    - name: tools-image
      type: image

  steps:
  - name: build-and-push-tools
    image: quay.io/buildah/stable:v1.11.0
    workingDir: '/workspace/$(inputs.params.repo-path)/'
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true
    resources:
      limits:
        cpu: 500m
        memory: 2Gi
    script: |
      #!/bin/sh
      set -ex
      buildah bud --tls-verify=$(inputs.params.tls-verify) --layers -f /workspace/$(inputs.params.repo-path)/openshift-ci/Dockerfile.tools -t $(outputs.resources.tools-image.url) .
      buildah push --tls-verify=$(inputs.params.tls-verify) $(outputs.resources.tools-image.url) docker://$(outputs.resources.tools-image.url)

  volumes:
  - name: varlibcontainers
    emptyDir: {}
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-project
spec:
  inputs:
    resources:
    - name: project-repo
      type: git
      targetPath: $(inputs.params.repo-path)
    - name: tools-image
      type: image
    - name: buildah-short-sha-image
      type: image
    params:
    - name: git-revision
      description: The git revision
    - name: repo-path
      description: The path to the repository
    - name: tls-verify
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"

  outputs:
    resources:
    - name: binary-image
      type: image

  steps:
  - name: make-build
    workingDir: '/workspace/$(inputs.params.repo-path)/'
    image: $(inputs.resources.tools-image.url)
    command: ["make"]
    args: ["build"]
    securityContext:
      privileged: true
    resources:
      limits:
        cpu: 400m
        memory: 2Gi

  - name: build-and-push-image
    image: $(inputs.resources.buildah-short-sha-image.url)
    workingDir: '/workspace/$(inputs.params.repo-path)/'
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true
    script: |
      #!/bin/sh
      set -ex
      buildah-short-sha bud $(outputs.resources.binary-image.url) $(inputs.params.git-revision) --tls-verify=$(inputs.params.tls-verify) --layers -f /workspace/$(inputs.params.repo-path)/build/Dockerfile .
      buildah-short-sha push $(outputs.resources.binary-image.url) $(inputs.params.git-revision) --tls-verify=$(inputs.params.tls-verify)

  volumes:
  - name: varlibcontainers
    emptyDir: {}
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: generate-and-push-csv
spec:
  inputs:
    resources:
    - name: project-repo
      type: git
      targetPath: $(inputs.params.repo-path)
    - name: tools-image
      type: image
    params:
    - name: git-revision
      description: The git revision
    - name: repo-path
      description: The path to the repository
    - name: quay-namespace
      description: The quay namespace CSV should be pushed to
  steps:

  - name: csv
    workingDir: '/workspace/$(inputs.params.repo-path)/'
    image: $(inputs.resources.tools-image.url)
    command: ["make"]
    args: ["push-to-quay-nightly", "QUAY_NAMESPACE=$(inputs.params.quay-namespace)"]
    securityContext:
      privileged: true

  volumes:
  - name: varlibcontainers
    emptyDir: {}
